#OFF/FATAL/ERROR/WARN/INFO/DEBUG/ALL
#定义总根
#log4j.rootLogger=warn, mylog
# Console
#log4j.appender.mylog=org.apache.log4j.ConsoleAppender
#log4j.appender.mylog.Target=System.out
#log4j.appender.mylog.Threshold=debug
#log4j.appender.mylog.layout=org.apache.log4j.PatternLayout
#log4j.appender.mylog.layout.ConversionPattern=%d{[yyyy/MM/dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n
#定义总根
log4j.rootLogger=DEBUG,console_log
# console_log
log4j.appender.console_log=org.apache.log4j.ConsoleAppender
log4j.appender.console_log.Target=System.out
log4j.appender.console_log.Threshold=DEBUG
log4j.appender.console_log.layout=org.apache.log4j.PatternLayout
log4j.appender.console_log.layout.ConversionPattern=[%d][%p][%m][%t:%r][%l]%n
#自定义包配置
#log4j.logger.com.iscas.test.log4j.package1=info, package1Error
#log4j.logger.cn.aofeng.common4j=info, package1Error
#log4j.additivity.package1Error=true
#log4j.appender.package1Error=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.package1Error.File=D:/logs/package1error.log
#log4j.appender.package1Error.Append=true
#log4j.appender.package1Error.Threshold=INFO
#log4j.appender.package1Error.layout=org.apache.log4j.PatternLayout
#log4j.appender.package1Error.layout.ConversionPattern=%d{[yyyy/MM/dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n
#log4j.appender.package1Error.filter.F1=org.apache.log4j.varia.LevelRangeFilter
#log4j.appender.package1Error.filter.F1.LevelMin=ERROR
#log4j.appender.package1Error.filter.F1.LevelMax=ERROR
# ================================================================================ #
# 项目路径配置 windows
#log4j.appender.warn_log.File=E:/LogMessage/singbonlog-dev-menjin/tomcatlog/81/log.log
#log4j.appender.error_log.File=E:/LogMessage/singbonlog-dev-menjin/tomcatlog/81/log.error.log
##线程池
#log4j.appender.thread_stack.File=E:/LogMessage/singbonlog-dev-menjin/thread/threadpool4j-threadstack.log
#log4j.appender.thread_state.File=E:/LogMessage/singbonlog-dev-menjin/thread/threadpool4j-threadstate.log
#log4j.appender.thread_pool_state.File=E:/LogMessage/singbonlog-dev-menjin/thread/threadpool4j-threadpoolstate.log
##=======================Log4J一些日志级别配置测试说明20180622============================##
#==============一、根配置====================#
#1. 首先定义根配置，log4j.rootLogger = [日志级别] ,  [自定义appender1], [自定义appender2], ......
#2. log4j.appender.[自定义appender1] = [定义输出类型的类]
#3. log4j.appender.[自定义appender1].Target = [输出目标]
#4. log4j.appender.[自定义appender1].Threshold = [true/false] 日志级别限定（与根配置的级别比较取高级别，会输出这个高级别或以上的日志，如根配置debug,这里配置warn,会输出warn或以上的级别）
#5. log4j.appender.[自定义appender1].laylout = [输出格式类]
#6. log4j.appender.[自定义appender1].laylout.ConversionPattern = [输出格式]
#=================二、自定义模块配置===================#
#    自定义模块配置与根配置没有关系，根的级别选择不会影响自定义的级别。只是additivity表示会不会使用根的配置也输出一次
#1. log4j.logger.[自定义模块名] = [日志级别] , [自定义appender1], [自定义appender2]，...自定义模块配置，
#    如果是slf4j调用的话，需要这样用 Logger logger = LoggerFactory.getLogger([自定义模块名])
#2. log4j.additivity.[自定义appender1]= [true/false] 默认是true,表示父（根）配置的输出方式也使用，如果是false,表示不使用，也就是比如根里配置了一个控制台输出，这里就不会输出了
#3. 其他一些配置同根配置，如输出格式等，输出为文件等
#4. log4j.appender.[自定义appender1].filter.F1 = org.apache.log4j.varia.LevelRangeFilter 日志级别过滤限定类
#5. log4j.appender.[自定义appender1].filter.F1.LevelMin= [level]
#   log4j.appender.[自定义appender1].filter.F1.LevelMax= [level]
#   过滤限定最高与最小级别，这里限定后的级别，与模块根级别，还有Threshold的配置取交集
#=================三、自定义包配置===================#
# 配置方式与自定义模块一样，只是把模块名或称包名。不同的是自定义包的配置可以使用Logger logger = LoggerFactory.getLogger(Class)的方式记录。
#1、常用标志：
#－X: X信息输出时左对齐
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2011-10-18 22:10:28,921
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%c: 输出日志信息所属的类目，通常就是所在类的全名
#%t: 输出产生该日志事件的线程名
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个"%"字符
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%m: 输出代码中指定的消息,产生的日志具体信息
#%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
#2、可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉
#3、假设当前logger名字空间是"a.b.c"
#%ca.b.c
#%c{2} b.c
#%20c（若名字空间长度小于20，则左边用空格填充）
#%-20c （若名字空间长度小于20，则右边用空格填充）
#%.30c （若名字空间长度超过30，截去多余字符）
#%20.30c （若名字空间长度小于20，则左边用空格填充；若名字空间长度超过30，截去多余字符）
#%-20.30c （若名字空间长度小于20，则右边用空格填充；若名字空间长度超过30，截去多余字符）
# ================================================================================ #


